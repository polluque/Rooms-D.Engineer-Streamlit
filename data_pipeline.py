# -*- coding: utf-8 -*-
"""Rooms_data_pipeline_DS4B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U0jTaxPwBqIXDP05EQVicMkRUkLy60oI

# ROOMS - DS4B - DATA PIPELINE - STAR UP COMPATIBILITY
"""

#importacion de librerias
import numpy as np
import pandas as pd
import os
from sklearn.preprocessing import OneHotEncoder #codificar variables categoricas como datos binarios

#definimos la ruta de los archivos csv (google colab)
"""
mainpath = "drive/MyDrive/DSRP_dataframes"
filename = "dataset_inquilinos.csv"
fullpath = os.path.join(mainpath, filename)
"""
#cargamos el dataset y lo convertimos en un dataframe
df = pd.read_csv('dataset_inquilinos.csv', index_col = 'id_inquilino')
#df.head()

"""
#cambio de ID, renombre de columnas
df = df.set_index('id_inquilino') # establece el ID como índice del DataFrame
#solo se puede ejcutar una sola vez esta porcion de codigo
#por que elimina la el index y coloca 'id_inquilino' como nuevo indice """

# #google colab
df.columns = [
    'horario', 'bioritmo', 'nivel_educativo', 'leer', 'animacion',
    'cine', 'mascotas', 'cocinar', 'deporte', 'dieta', 'fumador',
    'visitas', 'orden', 'musica_tipo', 'musica_alta', 'plan_perfecto', 'instrumento'
]

#df.head()

#ONE-HOT ENCODING
encoder = OneHotEncoder(sparse_output=False) #convierte variables categoricas en formato binario
#genera una matriz densa, es mas facil de manejar
df_encoded = encoder.fit_transform(df) #transforma los datos
df_encoded = df_encoded.astype(np.float32)  #Cambiar a float32
#obtener los nombres de las nuevas columnas
encoded_feature_names = encoder.get_feature_names_out()
#encoded_feature_names

#google colab
"""
# Mostrar la matriz completa en forma de DataFrame
# Crear el DataFrame con los datos codificados y asignar el índice original
df_encoded_df = pd.DataFrame(
    df_encoded,
    columns=encoder.get_feature_names_out(),
    index=df.index  # Aquí mantenemos el índice original (id_inquilino)
)

# Verificar los primeros registros
df_encoded_df.head()

df_encoded
"""
#google colab


#Aquí calculamos la matriz de similaridad usando el producto punto
matriz_s = np.dot(df_encoded, df_encoded.T)

#df_encoded: Matriz donde cada fila es un inquilino y cada columna una característica
#df_encoded.T: Transpuesta de la matriz
#np.dot: Calcula el producto punto entre todas las filas

#matriz_s



#google colab
"""
# Mostrar la matriz de similaridad completa en forma de DataFrame
# Crear el DataFrame de la matriz de similaridad con los IDs de los inquilinos
df_matriz_s = pd.DataFrame(
    matriz_s,
    index=df.index,  # Usar los IDs de los inquilinos como índice
    columns=df.index  # Usar los IDs de los inquilinos como columnas
)

df_matriz_s.head()

matriz_s
"""
#google colab

#normalizamos los valores a un rango de -100 a 100:
# Define el rango de destino
rango_min = -100
rango_max = 100

min_original = np.min(matriz_s)
max_original = np.max(matriz_s)

matriz_s_reescalada = ((matriz_s - min_original) / (max_original - min_original)) * (rango_max - rango_min) + rango_min
#Esto es útil para interpretar los datos en términos de compatibilidad (más altos = más compatibles).

# Mostrar la matriz de similaridad reescalada en forma de DataFrame
# Crear el DataFrame de la matriz de similaridad reescalada
#commvertimos la matriz reescalada a un dataframe de python como indice los id de clientes en filas y columnas

df_matriz_s_reescalada = pd.DataFrame(
    matriz_s_reescalada,
    index=df.index,  # Usar los IDs de los inquilinos como índice
    columns=df.index  # Usar los IDs de los inquilinos como columnas
)

#df_matriz_s_reescalada.head()

#busuqeda de inquilinos compatibles
def inquilinos_compatibles(id_inquilinos, topn):
    # Verificar si todos los ID de inquilinos existen en la matriz de similaridad
    for id_inquilino in id_inquilinos:
        if id_inquilino not in df_matriz_s_reescalada.index:
            return 'Ningun ID coincide con al busqueda de inquilinos'

    # Obtener las filas correspondientes a los inquilinos dados
    filas_inquilinos = df_matriz_s_reescalada.loc[id_inquilinos]

    # Calcular la similitud promedio entre los inquilinos
    similitud_promedio = filas_inquilinos.mean(axis=0)

    # Ordenar los inquilinos en función de su similitud promedio
    inquilinos_similares = similitud_promedio.sort_values(ascending=False)

    # Excluir los inquilinos de referencia (los que están en la lista)
    inquilinos_similares = inquilinos_similares.drop(id_inquilinos)

    # Tomar los topn inquilinos más similares
    topn_inquilinos = inquilinos_similares.head(topn)

    # Obtener los registros de los inquilinos similares
    registros_similares = df.loc[topn_inquilinos.index]

    # Obtener los registros de los inquilinos buscados
    registros_buscados = df.loc[id_inquilinos]

    # Concatenar los registros buscados con los registros similares en las columnas
    resultado = pd.concat([registros_buscados.T, registros_similares.T], axis=1)

    # Crear un objeto Series con la similitud de los inquilinos similares encontrados
    similitud_series = pd.Series(data=topn_inquilinos.values, index=topn_inquilinos.index, name='Similitud')

    # Devolver el resultado y el objeto Series
    return(resultado, similitud_series)


#google colab
"""

#df_matriz_s_reescalada.head()

#haciendo pequeñas consultas para practicar con la funcion 'inquilinos_compatibles'
id_inquilino = [1001]  # Debe ser una lista aunque sea un solo ID
#print(id_inquilino)
resultado, similitud = inquilinos_compatibles(id_inquilino, topn=2)
print(resultado)
print(similitud)

# Búsqueda intermedia: Múltiples IDs de inquilinos
id_inquilinos_input = input("Introduce los IDs de los inquilinos separados por comas (por ejemplo: 1, 2, 3): ")
id_inquilinos = [int(id.strip()) for id in id_inquilinos_input.split(",")] #list comprenhension,
#id_inquilinos_input.split(","): Divide el texto por comas
#strip(): Elimina espacios
#int(): Convierte a número entero

topn = int(input("¿Cuántos inquilinos compatibles deseas ver? (Por ejemplo, 5): "))

# Llamar a la función
resultado, multiple_similitud = inquilinos_compatibles(id_inquilinos, topn)

# Mostrar resultados
print("\nInquilinos buscados y sus compatibles:") #salto de linea
print(resultado)
print("\nSimilitudes:") #salto de linea
print(multiple_similitud)

"""